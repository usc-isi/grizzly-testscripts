#!/bin/bash

source functions.sh
source volume.sh

declare LOGFILE

#trap cleanUp EXIT
declare KEYNAME=keypair-demo1
declare KEYNAME_2=keypair-demo2
declare UNAUTHORIZED_IMAGE=demo2_fs
declare KVM_IMAGE=kvm_fs
declare OPENRC_DEMO2=/root/jp_scripts/openrc-demo2
declare OPENRC_DEMO1=/root/jp_scripts/openrc-demo1
declare TIMEOUT=600
declare FLAVOR=m1.tiny

HOSTS="
"
function cleanUp() {

#	nova keypair-delete $KEYNAME
#	rm -rf $KEYNAME $KEYNAME.pub
	source /root/openrc
	keystone user-delete batman
	keystone tenant-delete gotham

}



function do_user_stuff(){

	echo -n "39: keystone user-create --name batman --pass="secrete" --email=batman@isi.edu"
	local UserID=`keystone user-create --name batman --pass="secrete" --email=batman@isi.edu | grep id | awk '{print $4}'`
	local len=`expr length $UserID`
	if [ "$len" -ne "32" ]
	then
		msg="Keystone user-create failed, exiting."
		return 1
	else
		echo " success"
	fi
	echo -n "40: keystone tenant-create --name=gotham"
	local TenantID=`keystone tenant-create --name=gotham | grep id | awk '{print $4}'`
	len=`expr length $TenantID`
	if [ "$len" -ne "32" ]
	then
		echo "keystone tenant-create failed, exiting"
		return 1
	else
		echo " success"
	fi 
	#get a role, we'll use the Member role
	local RoleID=`keystone role-list | grep Member | awk '{print $2}'`
	len=`expr length $RoleID`

	if [ "$len" -ne "32" ]
        then
                echo "keystone role-list failed, exiting"
                return 1
        fi
	echo -n "41: keystone user-role-add --user-id $UserID --role-id $RoleID --tenant-id $TenantID"
	keystone user-role-add --user-id $UserID --role-id $RoleID --tenant-id $TenantID
	if [ "$?" -ne "0" ];
        then
                echo "keystone user-role-add failed, exiting."
                return 1
	else
		echo " success"
        fi
	echo -n "41.5: keystone user-role-list --user-id $UserID --tenant-id $TenantID | grep $RoleID"
	keystone user-role-list --user-id $UserID --tenant-id $TenantID | grep $RoleID
	if [ "$?" -ne "0" ];
        then
                echo "keystone user-role-list failed, exiting."
                return 1
	else
		echo " success"
        fi

	echo -n "42: keystone user-role-remove --user-id $UserID --role-id $RoleID --tenant-id $TenantID"	
	keystone user-role-remove --user-id $UserID --role-id $RoleID --tenant-id $TenantID
#	if [ "$RET" -ne "0" ];
	if [ "$?" -ne "0" ]
	then
                echo "keystone user-role-remove failed, exiting."
                return 1
	else
		echo " success"
	fi
	
	echo -n "43: keystone tenant-delete $TenantID"
	keystone tenant-delete $TenantID
	if [ "$?" -ne "0" ];
	then
		echo "keystone tenant-delete failed, exiting."
		return 1
	else
		echo " success"
	fi

	echo -n "44: keystone user-delete $UserID"
	keystone user-delete $UserID
	if [ "$?" -ne "0" ];
	then
		echo "keystone user-delete failed, exiting."
		return 1
	else
		echo " success"
	fi
	
	
	
	return 0
}

# The MAIN Function that should be called
function tests_39_to_52() {

    LOGFILE=$1
    local admin_rc=$2
    OPENRC_DEMO1=$3
    OPENRC_DEMO2=$4

    # expects admin openrc file to be sourced
    echo "Sourcing admin operc file: ${admin_rc}"
    source $admin_rc

    do_user_stuff
    if [ "$?" -ne "0" ];
    then
	echo "Something failed in do_user_stuff"
	cleanUp
	exit 1

    fi
    do_create_keypair $OPENRC_DEMO1 $KEYNAME
    if [ "$?" -ne "0" ];
    then
        echo "Something failed in do_create_keypair"
        cleanUp
        exit 1

    fi
    do_create_keypair $OPENRC_DEMO2 $KEYNAME_2
    if [ "$?" -ne "0" ];
    then
        echo "Something failed in do_create_keypair"
        cleanUp
        exit 1
	
    fi

    source $OPENRC_DEMO1

    INSTANCE_NAME=`mktemp -u`
    echo -n "45: nova boot --flavor $FLAVOR  --image $KVM_IMAGE --key_name $KEYNAME $INSTANCE_NAME"
    IMAGE_ID=`nova boot --flavor $FLAVOR  --image $KVM_IMAGE --key_name $KEYNAME $INSTANCE_NAME | grep "id" | grep -v tenant_id | grep -v user_id | awk '{print $4}'`
    for j in `seq 1 31`; do
	sleep 2
	RET=`nova show $IMAGE_ID | grep -i active`
	if [ $? -eq 0 ]; then
	    break
	fi

	if [ $j -eq "31" ]; then
            echo "Failed to launch instance"
            cleanUp
            exit 1
        fi
	
    done
    PUBLIC_IP=`nova show $IMAGE_ID | grep "public network" | awk '{print $5}'`
    
    for j in `seq 1 31`; do
	sleep 2
	RET=`ping_host $PUBLIC_IP`
	if [ $RET -eq 0 ]; then
	    echo " success"
            break
        fi
	if [ $j -eq "31" ]; then
	    echo "Failed to ping instance"
	    cleanUp 
	    exit 1
	fi
    done
    
    echo -n "46: ssh -o "StrictHostKeyChecking no,BatchMode yes" -i $KEYNAME root@$PUBLIC_IP ls > /dev/null"
    for i in `seq 1 $TIMEOUT`; do
	ssh -o "StrictHostKeyChecking no" -o "BatchMode yes" -i $KEYNAME root@$PUBLIC_IP ls > /dev/null
	if [ $? -eq 0 ]; then
	    echo " success"
	    break
	fi
	if [ "$i" -eq "$TIMEOUT" ]; then
	    echo "Failed to log into instance."
	    exit 1
	fi
    done
    source $OPENRC_DEMO2
    echo -n "47: ssh -o "StrictHostKeyChecking no,BatchMode yes" -i $KEYNAME_2 root@$PUBLIC_IP ls > /dev/null"
    ssh -o "StrictHostKeyChecking no" -o "BatchMode yes" -i $KEYNAME_2 root@$PUBLIC_IP ls > /dev/null
    if [ $? -eq 0 ]; then
	echo "Logged into VM as unauthorized user, fail."
	exit 1
    else
	echo " success"
    fi
    source $OPENRC_DEMO1
    
    echo -n "48: nova boot --flavor $FLAVOR  --image $UNAUTHORIZED_IMAGE --key_name $KEYNAME $INSTANCE_NAME"
    RET=`nova boot --flavor $FLAVOR  --image $UNAUTHORIZED_IMAGE --key_name $KEYNAME $INSTANCE_NAME`
    if [ "$?" -ne "1" ];
    then
	echo "Booted an unauthorized image, fail."
    else
	echo " success."
    fi
    
    INSTANCE_NAME=`mktemp -u`
    echo -n "49: nova boot --flavor $FLAVOR  --image $KVM_IMAGE --key_name $KEYNAME --num-instances 2 $INSTANCE_NAME"
    RET=`nova boot --flavor $FLAVOR  --image $KVM_IMAGE --key_name $KEYNAME --num-instances 2 $INSTANCE_NAME `
    IMAGE1_ID=`nova list | grep $INSTANCE_NAME | awk {'print $2}' | head -n 1`
    IMAGE2_ID=`nova list | grep $INSTANCE_NAME | awk {'print $2}' | tail -n 1`
    
    for j in `seq 1 31`; do
        sleep 2
        RET=`nova show $IMAGE1_ID | grep -i active`
        if [ $? -eq 0 ]; then
            break
        fi
	
        if [ $j -eq "31" ]; then
                echo "Failed to launch instance"
                cleanUp
                exit 1
        fi
	
    done
    PUBLIC1_IP=`nova show $IMAGE1_ID | grep "public network" | awk '{print $5}'`
    
for j in `seq 1 31`; do
    sleep 2
    RET=`ping_host $PUBLIC1_IP`
    if [ $RET -eq 0 ]; then
        break
    fi
    if [ $j -eq "31" ]; then
        echo "Failed to ping instance"
        cleanUp
        exit 1
    fi
done

for j in `seq 1 31`; do
    sleep 2
    RET=`nova show $IMAGE2_ID | grep -i active`
    if [ $? -eq 0 ]; then
        break
    fi
    
    if [ $j -eq "31" ]; then
        echo "Failed to launch instance"
        cleanUp
        exit 1
        fi
    
done
PUBLIC2_IP=`nova show $IMAGE2_ID | grep "public network" | awk '{print $5}'`

for j in `seq 1 31`; do
    sleep 2
    RET=`ping_host $PUBLIC2_IP`
    if [ $RET -eq 0 ]; then
        echo " success"
        break
    fi
    if [ $j -eq "31" ]; then
                echo "Failed to ping instance"
                cleanUp
                exit 1
    fi
done

source $OPENRC_DEMO2
echo -n "52: nova delete $IMAGE_ID (as an unauthorized user)"
RET=`nova delete $IMAGE_ID`
source $OPENRC_DEMO1
RET=`nova list | grep -c $IMAGE_ID`
if [ "$RET" -ne "1" ];
then
    echo "Delete image as an unauthorized user worked, fail."
    cleanUp
    exit 1
else
    echo " success."
fi

source $OPENRC_DEMO1
echo -n "50: nova delete $IMAGE_ID"
RET=`nova delete $IMAGE_ID`
for i in `seq 1 $TIMEOUT`; do
    sleep 2
    RET=`nova list | grep -c $IMAGE_ID`
    if [ "$RET" -eq "0" ]; then
	echo " success."
		break
    fi
    
    if [ "$i" -eq "$TIMEOUT" ]; then
	echo "Delete image as authorized user failed."
	exit 1
	
    fi

done
echo -n "51: nova delete $IMAGE1_ID $IMAGE2_ID"
RET=`nova delete $IMAGE1_ID $IMAGE2_ID`
for i in `seq 1 $TIMEOUT`; do
    sleep 2
    RET=`nova list | grep -c "$IMAGE1_ID\|$IMAGE2_ID"`
    if [ "$RET" -eq "0" ]; then
        echo " success."
        break
    fi
    
    if [ "$i" -eq "$TIMEOUT" ]; then
        echo "Delete image as authorized user failed."
        exit 1
	
    fi
    
    
done


do_delete_keypair $OPENRC_DEMO1 $KEYNAME
if [ "$?" -ne "0" ];
then
        echo "Something failed in do_delete_keypair"
        cleanUp
        exit 1

fi
do_delete_keypair $OPENRC_DEMO2 $KEYNAME_2
if [ "$?" -ne "0" ];
then
        echo "Something failed in do_delete_keypair"
        cleanUp
        exit 1

fi


} # End of Function